{"name":"CoreTextWrapper","body":"Core Text Objective-C Wrapper\r\n=============================\r\n\r\nIntroduction\r\n------------\r\n\r\nOne of the most promising and mysterious new frameworks introduced in\r\niOS 3.2 is Core Text. Apple defines Core Text as a “text drawing\r\nengine”, which allows Mac (and now iPad) apps to render rich text on any\r\ngraphics context. Strings drawn with Core Text feature lots of custom\r\nsettings such as detailed font information, columns, variable line and\r\nparagraph heights and several different attributes, which designers and\r\nfont aficionados surely understand much better than I do. Many new apps\r\nhave been using this framework since the release of the iPad,\r\nparticularly newspapers and ebook reader applications, rendering\r\ngorgeous text in custom fonts, many of them not available natively in\r\niOS. This framework is also used in lifestyle and corporate\r\napplications, too, where using a custom font is sometimes required to\r\nmatch the specifications of brands and trademarks.\r\n\r\n![image](http://akosma.com/wp/wp-content/uploads/2010/07/coretextwrapper.png)\r\n\r\nIt is very important to understand that Core Text is really just a text\r\ndrawing engine to be used on top of Quartz (Core Graphics), to render\r\nrich text on any graphics context. Core Text cannot be used to create a\r\nrich text editor, for example, so don’t expect to extend UITextView with\r\nit. But you can use it to draw any kind of rich text on screen, which\r\ncan make you avoid using UIWebView instances for that.\r\n\r\nFeatures\r\n--------\r\n\r\nOne of the most interesting capabilities of Core Text is being able to\r\nrender text in several columns. However, Core Text is a C-based\r\nframework, and I think that understanding and using the concepts and\r\nstructures required to render text in columns can be particularly\r\ntricky. To make the my life and that of my fellow developers easier,\r\nthis project contains a small set of Objective-C classes that\r\nencapsulate the creation of framesetters, attributed strings and other\r\nconstructions, and takes care of the creation of several columns, as\r\nwell as the division of the text in several pages if required.\r\n\r\nThe API interface is very simple (on purpose) and I’m pretty sure you’ll\r\nbe able to integrate it very easily in your own projects, particularly\r\nif you look at the sample project where the classes are used. I’ve also\r\nadded a category for UIFont, that returns the associated CTFontRef\r\npointer, in a similar fashion to UIImage, which is able to return a\r\npointer to the underlying CGImageRef pointer. It also allows to create a\r\nCTFontRef from any font embedded in the application bundle. I am puzzled\r\nthat the framework designers haven’t included this by default in UIKit.\r\n\r\nWhat’s next\r\n-----------\r\n\r\nA future extension I’d like to add would be a couple of categories to\r\nparse simple RTF or HTML strings (to start with, probably just with bold\r\nand italic text) and create the appropriate attributed string from it;\r\nthere’s a couple of AppKit extensions to NSAttributedString that do\r\nexactly that, but for the moment they are only available in the Mac\r\nversion of Cocoa, and I haven’t found anything similar for iOS yet.\r\n\r\nThanks\r\n------\r\n\r\nThe following people have helped this project grow, with pull requests,\r\ncomments or bug reports:\r\n\r\n-   [Jared Crawford](https://github.com/JaredCrawford) contributed\r\n    support for shadows in AKOCustomFontLabel.\r\n-   [Christian Menschel](http://www.tapwork.de) contributed the\r\n    AKOMultiColumnTextViewDataSource protocol to add custom views in the\r\n    text columns.\r\n\r\nLicense\r\n-------\r\n\r\nThe code, as usual, is available through with BSD license (see the\r\nLICENSE file), so feel free to use it and even contribute bug fixes or\r\nenhancements if you want. The font embedded in the project is Polsku\r\nRegula, [available through the Open Font\r\nLibrary.org](http://openfontlibrary.org/files/ospublish/140). The\r\nproject requires Xcode 3.2.3 and the iOS SDK 4.0, and it creates a\r\nsimple application that works on the iPad (iOS 3.2). As usual, use it at\r\nyour own risk. Enjoy!\r\n","tagline":"An Objective-C wrapper around Core Text for creating multi-column text and loading custom fonts","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}